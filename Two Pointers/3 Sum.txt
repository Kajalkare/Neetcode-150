3 Sum

Approach 1 - Brute force 
- three loops
T.C = O(n^3)	S.C = O(1)



vector<vector<int>> triplet(int n, vector<int> &arr) {
    set<vector<int>> st;

    // check all possible triplets:
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                if (arr[i] + arr[j] + arr[k] == 0) {
                    vector<int> temp = {arr[i], arr[j], arr[k]};
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
            }
        }
    }

    //store the set elements in the answer:
    vector<vector<int>> ans(st.begin(), st.end());
    return ans;
}

Approach 2 - sort + Two Pointer
T.C = O(n^2 + o(nlogn))	S.C = O(1)

vector<vector<int>> threeSum(vector<int>& nums) {
	int i = 0;  int n = nums.size();
	sort(nums.begin(), nums.end());
	vector<vector<int>>ans;
	while(i < n)
	{
		int j = i+1;    int k = n-1;    int target = nums[i]*-1;
		while(j < k)
		{
			int sum = nums[j] + nums[k];
			if(sum == target)
			{
				ans.push_back({nums[i], nums[j], nums[k]});
				int val1 = nums[j]; int val2 = nums[k];
				while(j < k && nums[j] == val1)
				{
					j++;
				}
				while(j < k && nums[k] == val1)
				{
					k--;
				}
			}
			else if(sum < target)
			{
				j++;
			}
			else{
				k--;
			}
		}
		int val = nums[i];
		while(i < n && nums[i] == val)
		{
			i++;
		}
	}
	return ans;
}