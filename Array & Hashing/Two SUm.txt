Two Sum

Approach 1 - Brute force

- Use two loops.
T.C = O(n*n)	S.C = O(1)

vector<int> twoSum(vector<int>& nums, int target) {
	int n = nums.size();
	for(int i=0; i<n; i++)
	{
		for(int j=i+1; j<n; j++)
		{
			if(nums[i]+nums[j] == target)
			{
				return {i, j};
			}
		}
	}
	return {-1, -1};
}

------------------------------------------------------------------------------------------------------

Approach 2 - Two pointer (if array is sorted)

T.C = O(n)		S.C = O(1)

vector<int> twoSum(vector<int>& nums, int target) {
	int n = nums.size();
	int i = 0;  int j = nums.size()-1;

	while(i <= j)
	{
		if(nums[i] + nums[j] == target)
		{
			return {i, j};
		}
		else if(nums[i]+nums[j] < target)
		{
			i++;
		}
		else{
			j--;
		}
	}
	return {-1, -1};
}

-----------------------------------------------------------------------------------------------------------

Approach 3 - using hashmap

T.C = O(n)		S.C = O(n)

vector<int> twoSum(vector<int>& nums, int target) {
	int n = nums.size();
	unordered_map<int, int>mp;
	for(int i=0; i<n; i++)
	{
		if(mp.find(target-nums[i]) != mp.end())
		{
			return {i, mp[target-nums[i]]};
		}
		mp[nums[i]] = i;
	}
	return {-1, -1};
}