Approach 1 - Brute force
Using two loops
T.C = O(n*n)	S.C = O(1)

vector<int> productExceptSelf(vector<int>& nums) {
	int n = nums.size();
	vector<int>res(n, 0);
	for(int i=0; i<n; i++)
	{
		int ans = 1;
		for(int j=0; j<n; j++)
		{
			if(i == j)
			{
				continue;
			}
			else{
				ans = ans*nums[j];
			}
		}
		res[i] = ans;
	}
	return res;
}

--------------------------------------------------------------------------------

Approach 2 - Using prefix and suffix array
T.C = O(3*n)		S.C = O(2*n)

vector<int> productExceptSelf(vector<int>& nums) {
	int n = nums.size();
	vector<int>res(n, 0);
	vector<int>pre(n, 0);   vector<int>suf(n, 0);
	pre[0] = 1;   suf[n-1] = 1;
	for(int i=1; i<n; i++)
	{
		pre[i] = pre[i-1]*nums[i-1];
	}
	for(int i=n-2; i>=0; i--)
	{
		suf[i] = suf[i+1]*nums[i+1];
	}
	res[0] = suf[0];    res[n-1] = pre[n-1];
	for(int i=1; i<n-1; i++)
	{
		res[i] = pre[i]*suf[i];
	}
	return res;
}

Approach 3 - Using only prefix array
T.C = O(2*n)		S.C = O(n)

vector<int> productExceptSelf(vector<int>& nums) {
	int n = nums.size();
	vector<int>res(n, 0);
	vector<int>suf(n, 0);
	suf[n-1] = 1;
	for(int i=n-2; i>=0; i--)
	{
		suf[i] = suf[i+1]*nums[i+1];
	}
	int pre = 1;
	for(int i=0; i<n; i++)
	{
		res[i] = pre*suf[i];
		pre = pre*nums[i];
	}
	return res;
}

Approach 4 - using 1 variable

T.C = O(2*n)		S.C = O(1)	

vector<int> productExceptSelf(vector<int>& nums) {
	int n = nums.size();
	vector<int>res(n, 1);
	for(int i=1; i<n; i++)
	{
		res[i] = res[i-1]*nums[i-1];
	}
	int suf = 1;
	for(int i=n-1; i>=0; i--)
	{
		res[i] = res[i]*suf;
		suf = suf*nums[i];
	}
	return res;
}