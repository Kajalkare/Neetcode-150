Valid anagram

Approach 1 - two loops
T.C = O(n*n)		S.C = O(1)

-------------------------------------------------------------------------------

Approach 2 - Sorting
T.C = (2*nlogn) 	S.C = O(1)

bool isAnagram(string s, string t) {
	sort(s.begin(), s.end());
	sort(t.begin(), t.end());

	if(s.length() != t.length())
	{
		return false;
	}
	for(int i=0; i<s.length(); i++)
	{
		if(s[i] != t[i])
		{
			return false;
		}
	}
	return true;
}

------------------------------------------------------------------------------------

Approach 3 - Hashmap

T.C = O(n)		S.C = O(n)

bool isAnagram(string s, string t) {
	
	unordered_map<char, int>mp;

	for(int i=0; i<s.length(); i++)
	{
		mp[s[i]]++;
	}
	for(int i=0; i<t.length(); i++)
	{
		mp[t[i]]--;
		if(mp[t[i]] == 0)
		{
			mp.erase(t[i]);
		}
	}
	return mp.size() == 0;
}